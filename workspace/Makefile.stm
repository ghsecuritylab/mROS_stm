LIB = libstm

ALL_OBJ = $(ASM_OBJ) $(C_OBJ) $(CXX_OBJ)

LIBRARY_PATHS = 
LIBRARIES = 

#LINKER_SCRIPT = $(STM32_LIB_DIR)/Projects/STM32F767ZI-Nucleo/Demonstrations/SW4STM32/STM32767ZI_Nucleo/STM32F767ZITx_FLASH.ld


############################################################################### 
ifneq ($(USE_TRUESTUDIO),true)
AS      = $(GCC_BIN)arm-none-eabi-as
CC      = $(GCC_BIN)arm-none-eabi-gcc
CPP     = $(GCC_BIN)arm-none-eabi-g++
LD      = $(GCC_BIN)arm-none-eabi-gcc
OBJCOPY = $(GCC_BIN)arm-none-eabi-objcopy
OBJDUMP = $(GCC_BIN)arm-none-eabi-objdump
SIZE    = $(GCC_BIN)arm-none-eabi-size 
AR = $(GCC_BIN)arm-none-eabi-ar
NM = $(GCC_BIN)arm-none-eabi-nm
RANLIB = $(GCC_BIN)arm-none-eabi-ranlib
else
AS      = arm-atollic-eabi-as
CC      = arm-atollic-eabi-gcc
CPP     = arm-atollic-eabi-g++
LD      = arm-atollic-eabi-gcc
OBJCOPY = arm-atollic-eabi-objcopy
OBJDUMP = arm-atollic-eabi-objdump
SIZE    = arm-atollic-eabi-size 
AR = arm-atollic-eabi-ar
NM = arm-atollic-eabi-nm
RANLIB = arm-atollic-eabi-ranlib
endif

ifneq ($(USE_TRUESTUDIO),true)
CPU = -mthumb -mcpu=cortex-m7 -mfloat-abi=hard -mfpu=fpv5-d16
else
CPU = -mthumb -mcpu=cortex-m7 -mfloat-abi=hard -mfpu=fpv5-d16
endif

CC_FLAGS = $(CPU) -c -g -Wall -specs=nano.specs
CC_FLAGS += -ffunction-sections -fdata-sections -fstack-usage 

#CC_SYMBOLS = -D__weak=__attribute__((weak)) -D__packed=__attribute__((__packed__)) -DUSE_HAL_DRIVER -DSTM32F767xx
CC_SYMBOLS = -DUSE_HAL_DRIVER -DSTM32F767xx

LD_FLAGS = $(CPU) -specs=nosys.specs -static -Wl,-Map=$(APPLNAME).map -Wl,--gc-sections -Wl,--defsym=malloc_getpagesize_P=0x80 -Wl,--start-group -Wl,--end-group -specs=nano.specs 
LD_SYS_LIBS = -lc -lm 

ifeq ($(DEBUG), true)
  CC_FLAGS += -Os 
  ASM_FLAGS += -Os 
else
  CC_FLAGS += -Os 
endif

.PHONY: all clean

all: $(LIB).a

#clean:
#	rm -f $(LIB).lib $(ALL_OBJ) $(DEPS)

$(ASM_OBJ): %.o: %.S
	$(CC) $(CPU) $(ASM_FLAGS) -c -x assembler-with-cpp -o $@ $<

$(C_OBJ): %.o: %.c
	$(CC) $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu11   $(INCLUDE_PATHS) -o $@ $<

$(CXX_OBJ): %.o: %.cpp
	$(CPP) $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu++11 $(INCLUDE_PATHS) -o $@ $<

$(LIB).a: $(ALL_OBJ)
	rm -f $(LIB).a
	$(AR) -rcs $(LIB).a $(ALL_OBJ)
	$(RANLIB) $(LIB).a

#
#  ASPカーネルのビルドに関するその他のオプション
#
#CLEAN_FILES += $(APPLNAME).map $(APPLNAME).d
CLEAN_FILES += $(APPLNAME).map
DEPS = $(ALL_OBJ:.o=.d)
-include $(DEPS)

APPL_CFLAGS =
APPL_LIBS = $(LIB).a
APPL_DIR = .

INCLUDES += $(INCLUDE_PATHS) # STM32ライブラリのヘッダファイルをアプリで使う
#COPTS += -mfpu=fpv5-d16 -mfloat-abi=hard
CDEFS += -DSTM32F767xx -DUSE_HAL_DRIVER -DUSE_STM32F7XX_NUCLEO_144
#CDEFS += -DTOPPERS_OMIT_BSS_INIT -DTOPPERS_OMIT_DATA_INIT # ASPのスタートアップルーチンでは初期化処理は不要

#APPL_CXXFLAGS += $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu++11 -fno-rtti
#CXXLIBS += $(LD_SYS_LIBS)
#LDFLAGS += $(LD_FLAGS)
#LDSCRIPT = $(LINKER_SCRIPT)
